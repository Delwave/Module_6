import os
import time
import shutil
import threading
import tkinter as tk
from tkinter import filedialog, scrolledtext, ttk

CHECK_INTERVAL = 2    # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)

# –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
PREFIXES = ["GR_1_", "GR_3_", "GR_4_", "GR_5_", "GR_6_", "GR_7_", "GR_8_", "GR_9_", "GR_13_"]


def is_file_ready(filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (–∑–Ω–∞—á–∏—Ç –æ–Ω –¥–æ–≥—Ä—É–∑–∏–ª—Å—è)."""
    try:
        with open(filepath, "rb"):
            return True
    except (PermissionError, OSError):
        return False


class FileMoverApp:
    def __init__(self, root):
        self.root = root
        self.root.title("File Mover")
        self.root.geometry("600x400")  # —É–≤–µ–ª–∏—á–∏–ª –æ–∫–Ω–æ
        self.root.resizable(False, False)

        self.source_dir = ""
        self.target_dir = ""
        self.running = False
        self.prefix = tk.StringVar(value=PREFIXES[-2])  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é GR_8_

        # === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
        tk.Label(root, text="–ü–∞–ø–∫–∞-–∏—Å—Ç–æ—á–Ω–∏–∫:").pack(anchor="w", padx=10, pady=2)
        self.src_label = tk.Label(root, text="–Ω–µ –≤—ã–±—Ä–∞–Ω–∞", fg="gray")
        self.src_label.pack(anchor="w", padx=20)
        tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å", command=self.choose_source).pack(pady=5)

        tk.Label(root, text="–ü–∞–ø–∫–∞-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:").pack(anchor="w", padx=10, pady=2)
        self.dst_label = tk.Label(root, text="–Ω–µ –≤—ã–±—Ä–∞–Ω–∞", fg="gray")
        self.dst_label.pack(anchor="w", padx=20)
        tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å", command=self.choose_target).pack(pady=5)

        # –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        tk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å —Ñ–∞–π–ª–∞:").pack(anchor="w", padx=10, pady=2)
        self.prefix_menu = ttk.Combobox(root, textvariable=self.prefix, values=PREFIXES, state="readonly")
        self.prefix_menu.pack(pady=5)

        # —Å—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(root, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg="red")
        self.status_label.pack(pady=5)

        # –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(root)
        control_frame.pack(pady=5)
        tk.Button(control_frame, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.start, width=15).pack(side="left", padx=10)
        tk.Button(control_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop, width=15).pack(side="right", padx=10)

        # –æ–∫–Ω–æ –ª–æ–≥–æ–≤ (—Å–¥–µ–ª–∞–ª –±–æ–ª—å—à–µ)
        self.log_area = scrolledtext.ScrolledText(root, width=70, height=15, state="disabled")
        self.log_area.pack(padx=10, pady=10)

    def log(self, message):
        self.log_area.config(state="normal")
        self.log_area.insert(tk.END, message + "\n")
        self.log_area.see(tk.END)
        self.log_area.config(state="disabled")

    def choose_source(self):
        self.source_dir = filedialog.askdirectory(title="–í—ã–±–æ—Ä –ø–∞–ø–∫–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        if self.source_dir:
            self.src_label.config(text=self.source_dir, fg="black")

    def choose_target(self):
        self.target_dir = filedialog.askdirectory(title="–í—ã–±–æ—Ä –ø–∞–ø–∫–∏-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        if self.target_dir:
            self.dst_label.config(text=self.target_dir, fg="black")

    def start(self):
        if not self.source_dir or not self.target_dir:
            self.log("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–±–µ –ø–∞–ø–∫–∏!")
            return
        if not self.running:
            self.running = True
            self.status_label.config(text=f"‚úî –†–∞–±–æ—Ç–∞–µ—Ç (–ø—Ä–µ—Ñ–∏–∫—Å: {self.prefix.get()})", fg="green")
            threading.Thread(target=self.worker, daemon=True).start()

    def stop(self):
        self.running = False
        self.status_label.config(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg="red")

    def worker(self):
        self.log(f"üöÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–ø—Ä–µ—Ñ–∏–∫—Å: {self.prefix.get()})...")
        while self.running:
            try:
                for filename in os.listdir(self.source_dir):
                    if filename.startswith(self.prefix.get()):
                        source_path = os.path.join(self.source_dir, filename)
                        target_path = os.path.join(self.target_dir, filename)

                        if is_file_ready(source_path):
                            try:
                                shutil.move(source_path, target_path)
                                self.log(f"‚úÖ –§–∞–π–ª {filename} –ø–µ—Ä–µ–º–µ—â—ë–Ω")
                            except Exception as e:
                                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {filename}: {e}")
                        else:
                            self.log(f"‚è≥ –§–∞–π–ª {filename} –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                time.sleep(CHECK_INTERVAL)
            except Exception as e:
                self.log(f"‚ö† –û—à–∏–±–∫–∞: {e}")
                time.sleep(5)


if __name__ == "__main__":
    root = tk.Tk()
    app = FileMoverApp(root)
    root.mainloop()